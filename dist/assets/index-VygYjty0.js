import{c as C,A as f,a as y,s as R,d as A,S as I}from"./loadSts-B3J-qUuz.js";import{e as M,i as H,C as P,E as _,g as U,I as j,h as B,f as G,M as N,P as V,R as J,b as L}from"./loadSts-B3J-qUuz.js";import"./lazy-json-BaHoWRir.js";import{C as p,g as W,a as E}from"./index-BeoCGuDU.js";import{b as X}from"./index-BeoCGuDU.js";import"./constants-EOWnxGfz.js";import"./noAuth-BRTlyyWt.js";import"./index-CwMm_7HW.js";class g extends p.classBuilder().ep({...C}).m(function(n,i,s,t){return[W(s,this.serialize,this.deserialize),E(s,n.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(f,y).ser(R).de(A).build(){}const l="us-east-1",h=async(e,n,i)=>{var o;const s=typeof e=="function"?await e():e,t=typeof n=="function"?await n():n;return(o=i==null?void 0:i.debug)==null||o.call(i,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${s} (provider)`,`${t} (parent client)`,`${l} (STS default)`),s??t??l},x=(e,n)=>{let i;return async s=>{var o,a,r;if(!i){const{logger:c=(o=e==null?void 0:e.parentClientConfig)==null?void 0:o.logger,region:m,requestHandler:u=(a=e==null?void 0:e.parentClientConfig)==null?void 0:a.requestHandler,credentialProviderLogger:d}=e,S=await h(m,(r=e==null?void 0:e.parentClientConfig)==null?void 0:r.region,d);i=new n({region:S,requestHandler:u,logger:c})}const{Credentials:t}=await i.send(new g(s));if(!t||!t.AccessKeyId||!t.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${s.RoleArn}`);return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,sessionToken:t.SessionToken,expiration:t.Expiration,credentialScope:t.CredentialScope}}},b=(e,n)=>n?class extends e{constructor(s){super(s);for(const t of n)this.middlewareStack.use(t)}}:e,z=(e={},n)=>x(e,b(I,n));export{p as $Command,M as AssumeRoleCommand,H as AssumeRoleResponseFilterSensitiveLog,g as AssumeRoleWithWebIdentityCommand,f as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,y as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,P as CredentialsFilterSensitiveLog,_ as ExpiredTokenException,U as IDPCommunicationErrorException,j as IDPRejectedClaimException,B as InvalidAuthorizationMessageException,G as InvalidIdentityTokenException,N as MalformedPolicyDocumentException,V as PackedPolicyTooLargeException,J as RegionDisabledException,I as STSClient,L as STSServiceException,X as __Client,z as getDefaultRoleAssumerWithWebIdentity};
